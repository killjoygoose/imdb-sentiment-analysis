"""
Module holding classes for postprocessing llm outputs into particular
formats.
"""

import json
import logging

_LOGGER = logging.getLogger(__name__)


class JsonPostprocessing:
    """
    Postprocessing callable class. To be used to postprocess
    the output of an LLM which is intended to be a class label into a
    json. The classification_fields guarantee that all expected fields
    are inside the output dict - even if the llm has not output them, they
    will be filled with None values.

    Args:
        classification_fields (list[str]): The name of the fields of the json
            object which contain class labels. If the model is used to predict
            multiple notions as in a multi-task classification setting, then
            a list of fields should be provided.
    """

    def __init__(self, classification_fields: list[str]):
        self.classification_fields = classification_fields

    def _extract_json_from_generated(self, generated: str) -> dict:
        """
        This class postprocesses the output of the llm into
        a dict object

        Args:
            generated (str): The string generated by the llm.

        Returns:
            json: The decoded json.
        """
        start = generated.find("{")  # find the first occurence of {
        end = generated.rfind("}")  # find the last occurrence of }
        try:
            str_ = generated[start : end + 1]
            json_ = json.loads(str_)
            return json_
        except json.decoder.JSONDecodeError:
            _LOGGER.critical("No correct json could be extracted.")
            return {i: None for i in self.classification_fields}

    def __call__(self, model_output: str) -> dict:
        return self._extract_json_from_generated(model_output)
